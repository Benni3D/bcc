.TH bcc 1 "2021-05-04"

.SH NAME
bcc - bad C-like compiler

.SH SYNOPSIS
.SY bcc
.OP -c\fR|\fB-i\fR|\fB-A\fR|\fB-S
.OP -w
.OP -O \fIlevel\fR
.OP -o \fIoutput\fR
.I source
.YS
.SY bcc
.OP -V
.YS

.SH DESCRIPTION
The
.I bcc
compiler is a small compiler for a C-like language.
The language currently has a minimal type-system. (SEE \fILANGUAGE\fR)

.SH OPTIONS
.B -o \fIoutput\fR
.RE
.RS 5
Specify the 
.I output
file (or '-' for standard output).
By default the
.I output
file is derived from the 
.I source
file, except if the
.B -A
option was specified, then it is standard output.
.RE
.B -c
.RE
.RS 5
Compile and assemble the program. (This is the default)
.RE
.RS 5
Note: For x86_64 and i386 it is required that the
.I nasm
assembler is installed.
.RE
.B -A
.RE
.RS 5
Only emit the abstract syntax tree of the program, as interpreted by the parser.
.RE
.B -i
.RE
.RS 5
Only emit the intermediate representation.
.RE
.B -S
.RE
.RS 5
Emit the assembly output.
.RE
.B -O
.I level
.RE
.RS 5
Specify the
.I optimization
level. (possible values: 0, 1, 2)
.RE
.B -w
.RE
.RS 5
Disable all \fIwarnings\fR.
.RE
.B -V
.RE
.RS 5
Print the version information.

.SH OPERANDS
.I output
.RE
.RS 5
The output file, to which to write the resulting output.

.RE
.I source
.RE
.RS 5
The source file, for which to generate the output.

.RE
.I level
.RS 5
The optimization level to perform. (default: 0)

.SH LANGUAGE
.I WIP
.RE
The compiler aims to implement a usable sub-set of the C99 standard,
while changing some annoyance and adding a few extensions.
Some of the changes break compatibility with the standard, this is intentional.
The compiler does not support the full feature-set of neither C99 nor C90.
But that was never the goal.
This compiler was created as a learning project and as a successor to benc (an even worse compiler than this only available for 32-bit x86).
.RE
Changes/Extensions:
.RE
- do-while does not require a compound statement (eg.
.B do f(); while (1);
is valid).
.RE
- the pointer '*' is part of the type, instead of the name (
.B int* a;
not
.B int *a;
).
.RE
- added new basic type \fBbyte\fR, which is guaranteed to be exactly 8 bits wide.
.RE
- parameter names of function implementations may be omitted. (eg.
.B int add(int, int a) { return a; }
).
.RE
- added
.B arraylen
operator, similar to the
.B sizeof
operator. Instead it evaluates to the length in elements of the array.


.SH OPTIMIZATIONS
Supported optimization techniques:
.RE
- constant folding (-O1)
.RE
- micro-optimizations (-O1)
.RE
- multiply to shift (-O1)
.RE
- fusion of memory instructions for x86 (-O2)

.SH TARGETS
Currently supported target architectures:
.RE
- i386
.RE
- x86_64

.RE
The compiler uses the System V ABI, where applicable.
.RE
There is no multilib support, the compiler is installed for a single target-architecture.
If a second target is wanted, the compiler must be rebuild and reinstalled for the specific architecure.


